## Direct log messages to stdout
## appender = class file which does the actual logging
## a file appender sends the log messages to a log file
#log4j.appender.stdout=org.apache.log4j.ConsoleAppender
#log4j.appender.stdout.Target=System.out
#
## layout for appender
#log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
#log4j.appender.stdout.layout.ConversionPattern=%d{ISO8601} %5p %40.40c:%4L - %m%n
#
## Root logger option
#log4j.rootLogger=DEBUG, stdout
#
## Hibernate logging options (INFO only shows startup messages)
#log4j.logger.org.hibernate=WARN
#log4j.logger.org.hibernate.SQL=INFO
#log4j.logger.org.hibernate.type=INFO
#log4j.logger.org.springframework.web=DEBUG

#log4j.logger.org.hibernate.SQL=DEBUG, sql
#log4j.additivity.org.hibernate.SQL=false


# in Konsole loggen ist uncool
# also soll in ein Log File geloggt werden
log4j.appender.rollingFile=org.apache.log4j.RollingFileAppender
log4j.appender.rollingFile.File=/home/aljona/NetBeansProjects/urlaubsverwaltung/urlaubsverwaltung.log
# creates a new file everytime the file size reaches the set maximum size
log4j.appender.rollingFile.MaxFileSize=2MB
log4j.appender.rollingFile.MaxBackupIndex=2
log4j.appender.rollingFile.layout=org.apache.log4j.PatternLayout
log4j.appender.rollingFile.layout.ConversionPattern=%p %d{dd MMM yyyy HH:mm:ss} - %m%n
log4j.rootLogger=FATAL, rollingFile
